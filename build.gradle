plugins {
    id 'java'
    id 'io.micronaut.application' version '4.5.4'
    id 'com.gradleup.shadow' version "8.3.9"
    id 'org.graalvm.buildtools.native' version '0.11.0'
}

group = 'com.fullsteam'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

micronaut {
    version = "4.9.2"
}

dependencies {
    annotationProcessor("io.micronaut:micronaut-core")
    annotationProcessor("io.micronaut:micronaut-inject-java")

    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-websocket")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-inject")
    implementation("ch.qos.logback:logback-classic")
    implementation("org.apache.commons:commons-lang3:3.18.0")
    implementation("commons-io:commons-io:2.20.0")
    implementation("org.dyn4j:dyn4j:5.0.2")
    runtimeOnly("org.yaml:snakeyaml")

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter:5.12.2")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

shadowJar {
    mergeServiceFiles()
    mainClassName = 'com.fullsteam.Application'
    manifest {
        attributes 'Main-Class': 'com.fullsteam.Application'
    }
    archiveBaseName.set('full-steam')
    archiveVersion.set(project.version)
    archiveClassifier.set('')
    zip64 = true
}

graalvmNative {
    agent {
        defaultMode = "standard"
        enabled = false
    }
    binaries {
        main {
            mainClass = 'com.fullsteam.Application'
            fallback = false
            useFatJar = true
//             buildArgs.add('--verbose')
            buildArgs.add('--add-opens=java.base/java.nio=ALL-UNNAMED')
            buildArgs.add('--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED')
            buildArgs.add('--add-opens=java.base/jdk.internal.ref=ALL-UNNAMED')
            buildArgs.add('--trace-class-initialization=ch.qos.logback.classic.Logger')
            buildArgs.add('--trace-object-instantiation=ch.qos.logback.core.AsyncAppenderBase$Worker')
            buildArgs.add('--initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback')
            buildArgs.add('--initialize-at-run-time=io.netty')
        }

        configureEach {
            resources.autodetect()
        }
    }
}
